<?xml version="1.0" encoding="UTF-8"?>
<ivntTest xmlns="http://www.aria-networks.com">

	<ivntTestVersion>1.0</ivntTestVersion>

	<documentCreated>Wed Jul 13 11:56:20 2016</documentCreated>

	<testScript>
		<name><![CDATA[Route Current Network]]></name>
		<description><![CDATA[]]></description>
		<version><![CDATA[]]></version>
		<script><![CDATA[var n = Network();

n.flushModelBuffers()
collectSteadyStateStats(n);]]></script>
		<expanded>false</expanded>
	</testScript>

	<testScript>
		<name><![CDATA[Convert to MLR]]></name>
		<description><![CDATA[]]></description>
		<version><![CDATA[]]></version>
		<script><![CDATA[var n = Network();

// create the two layers
n.addLayer("OTN");
n.addLayer("IP");


// get topo elements
var nodes = n.nodes()
var services = n.services()
var links = n.links()

// we need a special find function for node lookup
function find(container, pred) {
    for(var i in container) {
        var item = container[i];
        if (pred(item)) {
            return item;
        }
    }

    throw "couldnt find item";
}

// returns a predicate for item on layer
function itemOnLayer(layer) {
    return function(item) {return item.dynamicProperty("layer") == layer; }
}

// returns a pred for node name
function findNodePred(name) {
    return function(node) { return node.node_id == name; }
}


// add links to correct layers
links.filter(itemOnLayer(1)).forEach(function(link) { n.assignLinkToLayer(link, "OTN"); }) 
links.filter(itemOnLayer(3)).forEach(function(link) { n.assignLinkToLayer(link, "IP"); })
links.filter(itemOnLayer(-1)).forEach(function(link) { connectLayersWithLink(n, link); })


// sort out services
services.filter(itemOnLayer(3)).forEach(function(svc) 
                                        { 
                                            svc.ip_demand = true; 
                                            svc.protection_mode = "NO_PROTECTION"
                                            n.assignServiceToLayer(svc, "IP");
                                        })

services.filter(itemOnLayer(1)).forEach(function(svc) 
{ 
    // create new svc
    var new_svc = n.createP2PService(svc.name, 
                                     find(nodes, findNodePred(svc.getSourceNode().name)),
                                     find(nodes, findNodePred(svc.getDestinationNode().name)),
                                     true);

    new_svc.req_bw          = svc.req_bw;
    new_svc.protection_mode = svc.protection_mode;

    new_svc.setDynamicProperty("layer", svc.dynamicProperty("layer"));

    // calc paths
    var primary = svc.getPrimaryPath().links();
    var secondary = svc.getProtectedPath().links();

    primary.pop();
    primary.shift();

    secondary.pop();
    secondary.shift();

    new_svc.setPrimaryPath(primary, new_svc.req_bw);
    new_svc.setProtectedPath(secondary, 0);

    n.deleteService(svc);
})

n.flushModelBuffers()

services = n.services()
services.filter(itemOnLayer(1)).forEach(function(svc) { n.assignServiceToLayer(svc, "OTN") })

// create tunnel bindings

links.filter(itemOnLayer(3)).forEach(function(link) 
                                 {
                                     var svc = new Service(link.name);
                                     bindLinkToService(n, link, 0, svc, 0); 
                                 })


n.flushModelBuffers()
]]></script>
		<expanded>false</expanded>
	</testScript>
	<help><![CDATA[]]></help>
</ivntTest>
